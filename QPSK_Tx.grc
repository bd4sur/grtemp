options:
  parameters:
    author: ''
    category: Custom
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: QPSK_Tx
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: ''
    window_size: 2000,2000
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8.0]
    rotation: 0
    state: enabled

blocks:
- name: qpsk
  id: variable_constellation_rect
  parameters:
    comment: ''
    const_points: '[0.707+0.707j, -0.707+0.707j, -0.707-0.707j, 0.707-0.707j]'
    imag_sect: '2'
    precision: '8'
    real_sect: '2'
    rot_sym: '4'
    soft_dec_lut: None
    sym_map: symbol_map
    w_imag_sect: '1'
    w_real_sect: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 232.0]
    rotation: 0
    state: enabled
- name: symbol_map
  id: variable
  parameters:
    comment: ''
    value: '[0,1,2,3]'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [240, 8.0]
    rotation: 0
    state: enabled
- name: tx_gain
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: 0,0,1,1
    label: ''
    min_len: '200'
    orient: Qt.Horizontal
    rangeType: float
    start: '0'
    step: '1'
    stop: '50'
    value: '50'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 420.0]
    rotation: 0
    state: enabled
- name: blocks_complex_to_float_0
  id: blocks_complex_to_float
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [440, 256.0]
    rotation: 0
    state: true
- name: blocks_file_source_0
  id: blocks_file_source
  parameters:
    affinity: ''
    alias: ''
    begin_tag: pmt.intern("file_begin")
    comment: ''
    file: "/home/bd4sur/_Audio/01 - \u7D76\u5BFE\u30AB\u30E9\u30D5\u30EB\u5BA3\u8A00\
      .wav"
    length: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    repeat: 'False'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 84.0]
    rotation: 0
    state: enabled
- name: blocks_float_to_complex_0
  id: blocks_float_to_complex
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [664, 256.0]
    rotation: 0
    state: true
- name: blocks_pdu_to_tagged_stream_0
  id: blocks_pdu_to_tagged_stream
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    tag: packet_len
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [232, 176.0]
    rotation: 180
    state: enabled
- name: blocks_throttle_0
  id: blocks_throttle
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: '48000'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [232, 120.0]
    rotation: 0
    state: enabled
- name: digital_constellation_modulator_0
  id: digital_constellation_modulator
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    constellation: qpsk
    differential: 'True'
    excess_bw: '0.35'
    log: 'False'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_symbol: '16'
    verbose: 'False'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [232, 236.0]
    rotation: 0
    state: enabled
- name: digital_crc32_async_bb_1
  id: digital_crc32_async_bb
  parameters:
    affinity: ''
    alias: ''
    check: 'False'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [640, 120.0]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\nimport pmt\nimport\
      \ math\n\nclass blk(gr.sync_block):\n\n    def __init__(self, frame_length=1024):\n\
      \        gr.sync_block.__init__(\n            self,\n            name = 'File\
      \ to PDU',\n            in_sig = [np.uint8],\n            out_sig = None\n \
      \       )\n        self.frame_length = frame_length\n        self.message_port_register_out(pmt.intern(\"\
      message_out\"))\n\n    def work(self, input_items, output_items):\n        input_buf\
      \ = np.copy(input_items[0])\n        frame_count = math.ceil(len(input_buf)\
      \ / self.frame_length)\n\n        for i in range(frame_count):\n           \
      \ frame = input_buf[i * self.frame_length : (i+1) * self.frame_length]\n   \
      \         output_list = frame.tolist()\n            output_message = pmt.cons(pmt.PMT_NIL,\
      \ pmt.init_u8vector(len(output_list), (output_list)))\n            self.message_port_pub(pmt.intern(\"\
      message_out\"), output_message)\n\n        return len(input_items[0])\n\n\n\n\
      \n"
    affinity: ''
    alias: ''
    comment: ''
    frame_length: '1024'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('File to PDU', 'blk', [('frame_length', '1024')], [('0', 'byte', 1)],
      [('message_out', 'message', 1)], '', ['frame_length'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [384, 120.0]
    rotation: 0
    state: enabled
- name: import_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import numpy
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [152, 24.0]
    rotation: 0
    state: enabled
- name: kc_sdr_transmitter_0
  id: kc_sdr_transmitter
  parameters:
    affinity: ''
    alias: ''
    att: '0'
    bandwidth: int(2e6)
    cent_freq: int(439e6)
    comment: ''
    ifgain: tx_gain
    port: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [832, 228.0]
    rotation: 0
    state: enabled
- name: packet_format_gr38
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Block\n\"\"\"\n\nimport numpy as np\nfrom\
      \ gnuradio import gr\nimport pmt\nimport array\nclass blk(gr.sync_block):\n\
      \    \"\"\"Packet Format\"\"\"\n\n    def __init__(self):\n        gr.sync_block.__init__(self,\n\
      \            name = \"Packet Format GR38\",\n            in_sig = None,\n  \
      \          out_sig = None)\n        self.message_port_register_in(pmt.intern('PDU_in'))\n\
      \        self.message_port_register_out(pmt.intern('PDU_out0'))\n        self.set_msg_handler(pmt.intern('PDU_in'),\
      \ self.handle_msg)\n\n    def handle_msg(self, msg):\n        inMsg = pmt.to_python\
      \ (msg)\n        pld = inMsg[1] ## type-> numpy.ndarray\n        mLen = len(pld)\n\
      \        if (mLen > 0):\n            ## create a numpy array of type 'int' with\
      \ preamble and sync word\n            tmp_char_list = np.array([85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,225,90,232,147],dtype=int)\n\
      \            ## append length 2x\n            tmp_char_list=np.append(tmp_char_list,(mLen\
      \ >> 8))\n            tmp_char_list=np.append(tmp_char_list,(mLen & 255))\n\
      \            tmp_char_list=np.append(tmp_char_list,(mLen >> 8))\n          \
      \  tmp_char_list=np.append(tmp_char_list,(mLen & 255))\n            tmp_char_list_len=len(tmp_char_list)\n\
      \            ## append original payload\n            new_char_list=np.insert(tmp_char_list,tmp_char_list_len,pld)\n\
      \            new_char_list_len=len(new_char_list)\n            ## save final\
      \ numpy array as byte array (requires 'import array')\n            byte_array_new_char_list=array.array('B',new_char_list)\n\
      \            new_bytes_out_len = len(byte_array_new_char_list)\n           \
      \ ## create PMT u8vector using byte array\n            new_out_bytes_pmt=pmt.cons(pmt.PMT_NIL,pmt.init_u8vector(new_bytes_out_len,(byte_array_new_char_list)))\n\
      \            self.message_port_pub(pmt.intern('PDU_out0'), new_out_bytes_pmt)\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Packet Format GR38', 'blk', [], [('PDU_in', 'message', 1)], [('PDU_out0',
      'message', 1)], 'Packet Format', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [632, 184.0]
    rotation: 180
    state: true
- name: zeromq_pub_sink_0
  id: zeromq_pub_sink
  parameters:
    address: tcp://127.0.0.1:49203
    affinity: ''
    alias: ''
    comment: USRP sample rate = 768kHz
    hwm: '-1'
    pass_tags: 'False'
    timeout: '100'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [832, 364.0]
    rotation: 0
    state: disabled

connections:
- [blocks_complex_to_float_0, '0', blocks_float_to_complex_0, '1']
- [blocks_complex_to_float_0, '1', blocks_float_to_complex_0, '0']
- [blocks_file_source_0, '0', blocks_throttle_0, '0']
- [blocks_float_to_complex_0, '0', kc_sdr_transmitter_0, '0']
- [blocks_pdu_to_tagged_stream_0, '0', digital_constellation_modulator_0, '0']
- [blocks_throttle_0, '0', epy_block_0, '0']
- [digital_constellation_modulator_0, '0', blocks_complex_to_float_0, '0']
- [digital_crc32_async_bb_1, out, packet_format_gr38, PDU_in]
- [epy_block_0, message_out, digital_crc32_async_bb_1, in]
- [packet_format_gr38, PDU_out0, blocks_pdu_to_tagged_stream_0, pdus]

metadata:
  file_format: 1
